<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:aop="http://www.springframework.org/schema/aop" 
xmlns:context="http://www.springframework.org/schema/context" 
xmlns:jaxrs="http://cxf.apache.org/jaxrs" 
xmlns:tx="http://www.springframework.org/schema/tx" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">

    <context:property-placeholder location="classpath*:*.properties" />
    <!-- For consider the using of annotations for defining Spring Bean -->
    <context:annotation-config/>
    <!-- For defining Spring Bean -->
    <context:component-scan base-package="com.inn.counselling" />
    <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management; 
        such as when @Transactional methods are invoked -->
    <!--Enable Transactions -->    
    <tx:annotation-driven/>
    
    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>



    <!-- Necessary to get the entity manager injected into the factory bean AND If we want to inject instances of EntityManager using @PersistenceContext annotation, Usually this line is optional because a default PersistenceAnnotationBeanPostProcessor will be registered by the <context:annotation-config> and <context:component-scan> XML tags.-->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

    <!--Exception class,which occur at time of persistent data at runtime -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<bean class="com.inn.counselling.security.authentication.ContextProvider" id="contextApplicationContextProvider"/>

    <bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" id="bcryptPasswordEncoder" />
    <bean class="org.springframework.security.crypto.password.MessageDigestPasswordEncoder" id="sha1Encoder">
		<constructor-arg name="algorithm" value="SHA-1" />
    </bean>

	<bean class="org.springframework.security.crypto.password.DelegatingPasswordEncoder" id="passwordEncoder">
		<constructor-arg name="idForEncode" value="bcrypt" />
<!--
		<constructor-arg name="idForEncode" value="sha1Encoder" />
-->
		<constructor-arg name="idToPasswordEncoder">
			<map>
				<entry key="bcrypt" value-ref="bcryptPasswordEncoder" />
				<entry key="sha1Encoder" value-ref="sha1Encoder" />
			</map>
		</constructor-arg>
	</bean>

    <!--Datasource for  connection pooling and take value from db.properties-->
    <bean class="com.inn.counselling.utils.MyCustomBasicDataSource" id="dataSource">
        <property name="driverClassName" value="${driverClassName}" />
        <property name="url" value="${db.connection.url}" />
        <property name="username" value="${db.connection.username}" />
        <property name="password" value="${db.connection.password}" />
        <property name="maxWait" value="1000" />
        <property name="testOnBorrow" value="true" />
        <property name="validationQuery" value="Select 1" />
        <property name="maxActive" value="${check.out.timeout}" />
        <property name="testWhileIdle" value="true" />
        <property name="defaultAutoCommit" value="true" />
    </bean>
    <!-- Bean Declaration for the JPAVendorAdapter-->
    <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" id="jpaVendorAdapter">
        <property name="showSql" value="true" />
    </bean>
    <!-- This produces a container-managed EntityManagerFactory; 
         rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
    <!--Bean Declaration for the EntityManagerFactory-->
    <bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" id="entityManagerFactory">
        <property name="persistenceUnitName" value="DEFAULT" />
        <property name="dataSource" ref="dataSource" />
        <property name="persistenceXmlLocation" value="classpath:/META-INF/persistence.xml" />
        <property name="packagesToScan" value="com.inn.counselling" />
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
    </bean>
            <!-- This makes /META-INF/persistence.xml is no longer necessary (packagesToScan)..............................-->

     <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access. 
        JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
    <!--JTA or  Bean Declaration for the JpaTransactionManager-->
    <bean class="org.springframework.orm.jpa.JpaTransactionManager" name="transactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
    <!-- Bean Declaration for the JacksonJsonProvider-->
<!-- <bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" id="jsonProvider" />-->
    <bean id="jacksonMapper" class="com.fasterxml.jackson.databind.ObjectMapper"/>
    
    <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider" id="jsonProvider">
		<property name="mapper" ref="jacksonMapper"></property>
    </bean>

    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
	  <property name="velocityProperties">
		 <value>
		  resource.loader=class
		  class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
		 </value>
	  </property>
	</bean>

<!--
<bean class="org.apache.velocity.app.VelocityEngine" id="velocityEngine">
	<property name="velocityProperties">
		<props>
			<prop key="velocimacro.library"/>
			<prop key="class.resource.loader.class">org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader</prop>
			<prop key="resource.loader">class</prop>
		</props>
	</property>
</bean>
-->

    
    <!-- JAX RS Server cofiguration declaration-->
    <jaxrs:server address="/">
        <jaxrs:providers>
            <bean class="org.apache.cxf.jaxrs.ext.search.SearchContextProvider" id="searchContextProvider" />
            <bean class="com.inn.counselling.exception.mapper.ExceptionMapper" id="exceptionMapper" />
            <ref bean="jsonProvider" />
        </jaxrs:providers>
        <jaxrs:extensionMappings>
            <entry key="json" value="application/json" />
        </jaxrs:extensionMappings>
        <jaxrs:serviceBeans>
            <bean class="com.inn.counselling.rest.impl.AddressRestImpl" />
            <bean class="com.inn.counselling.rest.impl.CollegeRestImpl" />
            <bean class="com.inn.counselling.rest.impl.StudentRestImpl" />
            <bean class="com.inn.counselling.rest.impl.CollegeStudentRestImpl" />
            

            <bean class="com.inn.counselling.rest.impl.UnauthRestImpl" />
            <bean class="com.inn.counselling.rest.impl.PermissionRestImpl" />
            <bean class="com.inn.counselling.rest.impl.RoleRestImpl" />
            <bean class="com.inn.counselling.rest.impl.UserRestImpl" />
        </jaxrs:serviceBeans>
    </jaxrs:server>
</beans>


